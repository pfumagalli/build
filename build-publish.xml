<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- A little macro we can use to jar a target directory up -->
  <macrodef name="macro.package" >
    <attribute name="directory"/>
    <attribute name="filelabel"/>
    <sequential>
      <jar destfile="${targetdir}/publish/${ivy.module}@{filelabel}-${ivy.revision}-bin.jar"
           basedir="${targetdir}/compile/@{directory}"
           excludes="**/*.java"/>
      <zip destfile="${targetdir}/publish/${ivy.module}@{filelabel}-${ivy.revision}-src.zip"
           basedir="${sourcedir}/@{directory}"/>
    </sequential>
  </macrodef>

  <!-- Use JavaScript to JAR up each directory individually -->
  <target name="package"
          depends="compile,javadoc"
          unless="task.executed.package"
          description="Prepare JAR archives for each compiled source directory">
    <property name="task.executed.package" value="true"/>
    
    <mkdir dir="${targetdir}/publish"/>
    <script language="javascript">
      <![CDATA[
        importClass(java.io.File);

        // Create a dirset and get the public conf directories from /target/compile
        var targetDir = project.getProperty('targetdir');
        var dirSet = project.createDataType('dirset');
        var includes = project.getProperty('ivy.public.sources');
        dirSet.setDir(new File(targetDir + '/compile'));
        dirSet.setIncludes(includes);
        var scanner = dirSet.getDirectoryScanner(project);
        var directories = scanner.getIncludedDirectories();

        // Using our macro, package up each directory individually
        var task = project.createTask('macro.package');
        print(task.getClass());
        for (var x = 0; x < directories.length; x ++) {
          var directory = directories[x];
          var filelabel = directory == 'main' ? '' : '-' + directory;
          task.setDynamicAttribute('directory', directory);
          task.setDynamicAttribute('filelabel', filelabel);
          task.perform();
        }
      ]]>
    </script>
  </target>

  <!-- Publishing via Ivy -->
  <target name="publish"
          depends="package"
          unless="task.executed.publish"
          description="Publish artifacts in the local Ivy repository">
    <property name="task.executed.publish" value="true"/>

    <ivy:publish resolver="publications"
                 conf="*(public)"
                 replacedynamicrev="true"
                 overwrite="true"
                 publishivy="true"
                 update="true"
                 artifactspattern="${targetdir}/publish/[artifact]-[revision]-[type].[ext]"/>
  </target>

</project>